{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Tweet","tweetObj","isOwner","editing","setEditing","text","newTweet","setNewTweet","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","update","autuFocus","src","faTrash","faPencilAlt","TweetFactory","userObj","tweet","setTweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","onSnapshot","snapshot","tweetArray","docs","map","marginTop","Profile","refreshUser","displayName","newDisplayName","setNewDisplayName","history","useHistory","getMyTweets","where","orderBy","get","updateProfile","autoFocus","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3301ec1.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/storage';\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_PROJECTID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGE_ID,\n    appId: process.env.REACT_APP_APP_ID\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\n\nexport const authService = firebase.auth();\n\nexport const dbService = firebase.firestore();\n\nexport const storageService = firebase.storage();\n","import React, {useState} from 'react';\nimport {authService} from \"../fbase\";\n\nconst AuthForm = () => {\n\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [newAccount, setNewAccount] = useState(true);\n    const [error, setError] = useState(\"\");\n\n    const onChange = (event) => {\n        const {target: {name, value}} = event;\n        if(name === 'email') {\n            setEmail(value)\n        } else if(name ==='password') {\n            setPassword(value)\n        }\n    }\n\n    const onSubmit = async (event) => {\n        // preventDefault는 기본 행위가 실행되는 걸 원치 않는다는 것.\n        event.preventDefault();\n        try {\n            let data\n            if(newAccount) {\n                data = await authService.createUserWithEmailAndPassword(\n                    email, password\n                )\n            } else {\n                data = await authService.signInWithEmailAndPassword(\n                    email, password\n                )\n            }\n            console.log(data)\n\n        } catch (error) {\n            setError(error.message)\n        }\n\n    }\n\n    const toggleAccount = () => setNewAccount((prev) => !prev)\n    return (\n        <>\n            <form onSubmit={onSubmit} className=\"container\">\n                <input\n                    name='email'\n                    type='email'\n                    placeholder='Email'\n                    required\n                    value={email}\n                    onChange={onChange}\n                    className=\"authInput\"\n                />\n                <input\n                    name=\"password\"\n                    type='password'\n                    placeholder='Password'\n                    required\n                    value={password}\n                    onChange={onChange}\n                    className=\"authInput\"\n                />\n\n                <input\n                    type='submit'\n                    value={newAccount ? \"Create Account\" : 'Sign In'}\n                    className=\"authInput authSubmit\"\n                />\n                {error && <span className=\"authError\">{error}</span>}\n            </form>\n            <span onClick={toggleAccount} className=\"authSwitch\">\n                {newAccount ? \"Sign In\" : \"Create Account\"}\n            </span>\n        </>\n    );\n};\n\nexport default AuthForm;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n    faTwitter,\n    faGoogle,\n    faGithub,\n} from '@fortawesome/free-brands-svg-icons';\nimport { authService, firebaseInstance } from \"../fbase\";\nimport AuthForm from \"../components/AuthForm\";\n\nconst Auth = () => {\n\n    const onSocialClick = async (event) => {\n        const {target: {name}} = event;\n        let provider;\n        if (name === 'google') {\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\n        } else if (name === 'github') {\n            provider = new firebaseInstance.auth.GithubAuthProvider();\n        }\n        const data = await authService.signInWithPopup(provider);\n        console.log(data)\n    }\n\n    return (\n        <div className=\"authContainer\">\n            <FontAwesomeIcon\n                icon={faTwitter}\n                color={\"#04AAFF\"}\n                size=\"3x\"\n                style={{ marginBottom: 30 }}\n            />\n            <AuthForm />\n            <div className=\"authBtns\">\n                <button onClick={onSocialClick} name='google' className=\"authBtn\">\n                    Continue with Google <FontAwesomeIcon icon={faGoogle} />\n                </button>\n                <button onClick={onSocialClick} name='github' className=\"authBtn\">\n                    Continue with Github <FontAwesomeIcon icon={faGithub} />\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Auth;\n","import React, {useState} from 'react';\nimport {dbService, storageService} from \"../fbase\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Tweet = ({ tweetObj, isOwner }) => {\n    // edit을 할 수 있거나 없게 도와주는 state\n    const [editing, setEditing] = useState(false);\n    // input 입력된 Text를 업데이트 해주는 state\n    const [newTweet, setNewTweet] = useState(tweetObj.text);\n\n    const onDeleteClick = async () => {\n        const ok = window.confirm(\"Are you sure you want to delete this tweet?\")\n        if(ok) {\n            // 삭제할 수 있는 있유는 documents(doc).id를 알고 있었기 때문.\n            // collection안에 있는 documents id를 얻어낸 다음에 삭제하는 것.\n            await dbService.doc(`tweets/${tweetObj.id}`).delete();\n            await storageService.refFromURL(tweetObj.attachmentUrl).delete();\n        }\n    };\n\n    const toggleEditing = () => setEditing((prev) => !prev);\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        //\n        await dbService.doc(`tweets/${tweetObj.id}`).update({\n            // newTweet는 input에 있는 Text를 말함.\n            text: newTweet\n        })\n        setEditing(false)\n    };\n\n    const onChange = (event) => {\n        const {target: {value}} = event;\n        setNewTweet(value)\n    };\n\n    return (\n        <div className=\"nweet\">\n            {editing ? (\n            <>\n                <form onSubmit={onSubmit} className=\"container nweetEdit\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"Edit your Tweet\"\n                        value={newTweet}\n                        required\n                        autuFocus\n                        onChange={onChange}\n                        className=\"formInput\"\n                    />\n                    <input\n                        type=\"submit\"\n                        value=\"Update Tweet\"\n                        className=\"formBtn cancelBtn\"\n                    />\n                </form>\n                <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\n                    Cancel\n                </span>\n            </>\n            ) : (\n            <>\n                <h4>{tweetObj.text}</h4>\n                {tweetObj.attachmentUrl && <img src={tweetObj.attachmentUrl}/>}\n                {isOwner && (\n                    <div className=\"nweet__actions\">\n                        <span onClick={onDeleteClick}>\n                            <FontAwesomeIcon icon={faTrash} />\n                        </span>\n                        <span onClick={toggleEditing}>\n                            <FontAwesomeIcon icon={faPencilAlt} />\n                        </span>\n                    </div>\n                )}\n            </>\n            )\n            }\n        </div>\n    )\n\n}\n\nexport default Tweet;\n","import React, {useState} from 'react';\nimport {dbService, storageService} from \"../fbase\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faTimes} from '@fortawesome/free-solid-svg-icons';\n\n\nconst TweetFactory = ({ userObj}) => {\n\n    const [tweet, setTweet] = useState(\"\");\n    const [tweets, setTweets] = useState([]);\n    const [attachment, setAttachment] = useState(\"\");\n\n    const onSubmit = async (event) => {\n        if (tweet === \"\") {\n            return;\n        }\n        event.preventDefault();\n        let attachmentUrl = \"\";\n        if (attachment !== \"\") {\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`)\n            const response = await attachmentRef.putString(attachment, 'data_url');\n            attachmentUrl = await response.ref.getDownloadURL();\n        }\n        const tweetObj = {\n            text: tweet,\n            createAt: Date.now(),\n            creatorId: userObj.uid,\n            attachmentUrl\n        };\n        await dbService.collection(\"tweets\").add(tweetObj);\n        setTweet(\"\");\n        setAttachment(\"\");\n    };\n    const onChange = (event) => {\n        const { target : {value}} = event;\n        setTweet(value);\n    }\n\n    const onFileChange = (event) => {\n        //  es6 evnet 안에있는 target 안에있는 files을 상수화 한것.\n        // fileReader API 사용한다.\n        const {target: {files}} = event;\n        const theFile = files[0];\n        const reader = new FileReader();\n        reader.onloadend = (finishedEvent) => {\n            const {currentTarget: {result}} = finishedEvent;\n            setAttachment(result);\n        };\n        reader.readAsDataURL(theFile)\n    }\n\n    const onClearAttachment = () => setAttachment(\"\")\n\n    return (\n        <div>\n            <form onSubmit={onSubmit} className=\"factoryForm\">\n                <div className=\"factoryInput__container\">\n                    <input\n                        className=\"factoryInput__input\"\n                        value={tweet}\n                        onChange={onChange}\n                        type='text'\n                        placeholder=\"What's on your mind\"\n                        maxLength={120}\n                    />\n                    <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\"/>\n                </div>\n                <label for=\"attach-file\" className=\"factoryInput__label\">\n                    <span>Add photos</span>\n                    <FontAwesomeIcon icon={faPlus} />\n                </label>\n                <input\n                    id=\"attach-file\"\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={onFileChange}\n                    style={{\n                        opacity: 0\n                    }}\n                />\n                {attachment &&\n                <div className=\"factoryForm__attachment\">\n                    <img\n                        src={attachment}\n                        style={{ backgroundImage: attachment}}\n                    />\n                    <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n                        <span>Remove</span>\n                        <FontAwesomeIcon icon={faTimes} />\n                    </div>\n                </div>}\n            </form>\n        </div>\n    );\n};\n\nexport default TweetFactory;\n","import React, {useState, useEffect} from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { dbService, storageService } from \"../fbase\";\nimport Tweet from \"../components/Tweet\";\nimport TweetFactory from \"../components/TweetFactory\";\n\nconst Home = ({ userObj }) => {\n    //여기서 onSubmit을 위한 state\n    const [tweets, setTweets] = useState([]);\n\n    useEffect(() => {\n        // useEffect안에 넣은 이방식은 리로드 하지 않아도 바로 view에 표시된다. 전 방식은 리로드 해줘야하는 고전 방식\n        // forEach 방식은 re-render 해야하는 불편함이 있다.\n        // onSnapshot은 database에 무슨일이 있을때(listener) 알림을 받는다.\n        // 새로운 snapshot을 받을때 tweetArray를 생성한다.\n        // 그런 다음에 state에 배열을 집어 넣는다.\n        dbService.collection(\"tweets\").onSnapshot((snapshot) => {\n            const tweetArray = snapshot.docs.map(doc => ({id: doc.id, ...doc.data(),}))\n            setTweets(tweetArray)\n        })\n    }, [])\n    return (\n        <div className=\"container\">\n            <TweetFactory userObj={userObj}/>\n            <div style={{ marginTop: 30 }}>\n                {tweets.map(tweet =>\n                    <Tweet\n                        key={tweet.id}\n                        // tweetObj를 제공했기 때문에 delete가 id를 기반으로 삭제를 할 수 있다\n                        tweetObj={tweet}\n                        isOwner={tweet.creatorId === userObj.uid}\n                    />\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default Home;\n\n","import React, {useEffect, useState} from 'react';\nimport {authService, dbService} from \"../fbase\";\nimport { useHistory } from 'react-router-dom';\n\nconst Profile =  ({ userObj, refreshUser }) => {\n\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName)\n\n    const history = useHistory();\n    const onLogoutClick = () => {\n        authService.signOut();\n        history.push(\"/\");\n    }\n\n    const getMyTweets = async() => {\n        const tweets = await dbService\n            .collection(\"tweets\")\n            .where(\"creatorId\", \"==\", userObj.uid)\n            .orderBy(\"createAt\")\n            .get();\n        console.log(tweets.docs.map((doc) => doc.data()))\n    }\n\n    useEffect(() => {\n        getMyTweets();\n    }, []);\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        if(userObj.displayName !== newDisplayName) {\n            await userObj.updateProfile({\n                displayName: newDisplayName\n            })\n            refreshUser();\n        }\n    };\n\n    const onChange = (event) => {\n        const {target: {value}} = event;\n        setNewDisplayName(value)\n    }\n\n    return (\n        <div className=\"container\">\n            <form onSubmit={onSubmit} className=\"profileForm\">\n                <input\n                    onChange={onChange}\n                    type=\"text\"\n                    autoFocus\n                    placeholder=\"Display Name\"\n                    value={newDisplayName}\n                    className=\"formInput\"\n                />\n                <input\n                    type=\"submit\"\n                    value=\"Update Profile\"\n                    className=\"formBtn\"\n                    style={{\n                        marginTop: 10\n                    }}\n                />\n            </form>\n            <button onClick={onLogoutClick} className=\"formBtn cancelBtn logOut\">\n                Log Out\n            </button>\n        </div>\n    )\n}\n\nexport default Profile;\n","import React from 'react';\nimport { Link  } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\n\nconst Navigation = ({ userObj }) =>\n    <nav>\n        <ul style={{ display: \"flex\", justifyContent: 'center', marginTop: 50 }}>\n            <li>\n                <Link to=\"/\" style={{ marginRight: 10 }}>\n                    <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size='2x' />\n                </Link>\n            </li>\n            <li>\n                <Link\n                    to=\"/profile\"\n                    style={{\n                        marginLeft: 10,\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"center\",\n                        fontSize: 12\n                    }}\n\n                >\n                    <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n                    <span style={{ marginTop: 10}}>\n                        {userObj.displayName\n                            ? `${userObj.displayName}'s Profile`\n                            : \"Profile\"}\n                    </span>\n                </Link>\n            </li>\n        </ul>\n    </nav>\n\nexport default Navigation;\n","import React from 'react';\nimport { Route, Switch, HashRouter as Router } from 'react-router-dom';\nimport Auth from \"../routes/Auth\";\nimport Home from \"../routes/Home\";\nimport Profile from \"../routes/Profile\";\nimport Navigation from \"components/Navigation\";\n\nconst AppRouter = ({ isLoggedIn, userObj, refreshUser }) => {\n\n\n    return (\n        <Router>\n            {isLoggedIn && <Navigation userObj={userObj}/>}\n            <Switch>\n                {isLoggedIn ? (\n                <div\n                    style={{\n                        maxWidth: 890,\n                        width: '100%',\n                        margin: \"0 auto\",\n                        marginTop: 80,\n                        display: \"flex\",\n                        justifyContent: 'center'\n                    }}\n                >\n                    <Route exact path=\"/\">\n                        <Home userObj={userObj}/>\n                    </Route>\n                    <Route exact path=\"/profile\">\n                        <Profile userObj={userObj} refreshUser={refreshUser}/>\n                    </Route>\n                </div>\n                )  : (\n                <>\n                    <Route exact path=\"/\">\n                        <Auth />\n                    </Route>\n                </>\n                )}\n            </Switch>\n        </Router>\n    )\n};\n\nexport default AppRouter;\n","import React, { useState, useEffect } from 'react';\nimport AppRouter from \"components/Router\";\nimport {authService, dbService} from \"fbase\";\n\nfunction App() {\n\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    // 변화가 일어날때마다 stateChange가 일어날때마다 listen 하고 있다. ex) 로그인, 로그아웃, 회원가입 등등.\n    authService.onAuthStateChanged((user) => {\n      if(user) {\n        // user 전체 내용을 받아오는 것도 좋지만 object의 정보량이 너무 많아서 react.js가 re-render하는데 오류가 생길수도있다.\n        // 그래서 받는 내용을 선언해줌으로써 re-render를 용이하게 해줌\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args)\n        });\n      } else {\n        setUserObj(null);\n      }\n      setInit(true)\n    })\n  }, [])\n\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args)\n    });\n  };\n  return (\n      <>\n       {init ? (\n           <AppRouter\n               refreshUser={refreshUser}\n               isLoggedIn={Boolean(userObj)}\n               userObj={userObj}\n           />\n           ) : (\n               \"Initializing\"\n           )}\n      </>\n  );\n};\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport \"./styles.css\";\nimport firebase from './components/App'\nconsole.log(firebase)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}